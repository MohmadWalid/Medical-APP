rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDoctor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
    }
    
    function isPatient() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/patients/$(request.auth.uid));
    }

    function isPatientOfDoctor(patientId) {
      return isDoctor() && 
        exists(/databases/$(database)/documents/patients/$(patientId)) &&
        get(/databases/$(database)/documents/patients/$(patientId)).data.doctorId == request.auth.uid;
    }

    // Chat messages rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        // Allow if user is a participant in the chat
        request.auth.uid in resource.data.participants ||
        // Or if user is a doctor and the message is from their patient
        (isDoctor() && isPatientOfDoctor(resource.data.patientId)) ||
        // Or if user is the patient and the message is for them
        (isPatient() && request.auth.uid == resource.data.patientId)
      );
      
      allow list: if isAuthenticated() && (
        // Allow listing messages for a specific patient
        request.query.filters.size() >= 1 &&
        request.query.filters[0].field == 'patientId' &&
        (
          // Allow if user is the patient
          request.auth.uid == request.query.filters[0].value ||
          // Or if user is the patient's doctor
          isPatientOfDoctor(request.query.filters[0].value)
        )
      );
      
      allow create: if isAuthenticated() && (
        // Validate sender role matches user type
        (isDoctor() && request.resource.data.senderRole == 'doctor') ||
        (isPatient() && request.resource.data.senderRole == 'patient')
      ) && (
        // Ensure user is a participant
        request.auth.uid in request.resource.data.participants
      );
      
      allow update: if isAuthenticated() && (
        // Only allow status updates by participants
        request.auth.uid in resource.data.participants &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status'])
      );
    }

    // Doctor profiles rules
    match /doctors/{doctorId} {
      allow read: if isAuthenticated();
      allow write: if isDoctor() && request.auth.uid == doctorId;
    }

    // Patient profiles rules
    match /patients/{patientId} {
      allow read: if isAuthenticated();
      allow write: if isPatient() && request.auth.uid == patientId;
    }
  }
} 